# -*- coding: utf-8 -*-
"""
Created on Thu Jun  5 18:31:39 2025

@author: olivi
"""

import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
import streamlit.components.v1 as components
import requests
import json
import time
from datetime import datetime
import subprocess
import sys
import os

# Configuration de la page
st.set_page_config(
    page_title="Eta-One Racing",
    page_icon="üèÅ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS personnalis√© pour l'interface
st.markdown("""
<style>
    .main-header {
        font-size: 3rem;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
    }
    .metric-card {
        background: linear-gradient(90deg, #f0f2f6, #ffffff);
        padding: 1rem;
        border-radius: 10px;
        border-left: 4px solid #1f77b4;
        margin: 0.5rem 0;
    }
    .status-good { color: #28a745; font-weight: bold; }
    .status-warning { color: #ffc107; font-weight: bold; }
    .status-danger { color: #dc3545; font-weight: bold; }
    .stButton > button {
        background-color: #1f77b4;
        color: white;
        border-radius: 8px;
        border: none;
        padding: 0.5rem 1rem;
        transition: all 0.3s;
    }
    .stButton > button:hover {
        background-color: #0d47a1;
        transform: translateY(-2px);
    }
</style>
""", unsafe_allow_html=True)

# Titre principal
st.markdown('<h1 class="main-header">üèÅ Eta-One Racing - Syst√®me Int√©gr√©</h1>', unsafe_allow_html=True)

# Sidebar pour navigation
st.sidebar.title("üöó Navigation")
page = st.sidebar.selectbox(
    "S√©lectionner une page",
    ["üèÅ Position Live & Circuit", "‚öôÔ∏è Simulation", "üîß Optimisation", "üìä Analyses"]
)

# Configuration globale
if 'simulation_running' not in st.session_state:
    st.session_state.simulation_running = False
if 'current_strategy' not in st.session_state:
    st.session_state.current_strategy = 'normal'
if 'circuit_data' not in st.session_state:
    st.session_state.circuit_data = None

# =============================================================================
# PAGE 1: POSITION LIVE & CIRCUIT
# =============================================================================

if page == "üèÅ Position Live & Circuit":
    st.header("üó∫Ô∏è Position en Temps R√©el et Gestion de Strat√©gie")
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.subheader("Carte Interactive du Circuit")
        
        # Int√©gration de ton syst√®me HTML/JS existant
        tracking_html = """
        <!DOCTYPE html>
        <html lang="fr">
        <head>
          <meta charset="UTF-8" />
          <meta name="viewport" content="width=device-width, initial-scale=1.0" />
          <title>Suivi Eta-One</title>
          <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
          <style>
            html, body, #map { margin: 0; padding: 0; height: 500px; }
            .info-panel {
              position: absolute;
              top: 10px;
              left: 10px;
              background: rgba(255, 255, 255, 0.95);
              padding: 10px;
              border-radius: 8px;
              font-family: Arial, sans-serif;
              z-index: 1000;
              min-width: 200px;
            }
            .strategy-panel {
              position: absolute;
              top: 10px;
              right: 10px;
              background: rgba(255, 255, 255, 0.95);
              padding: 15px;
              border-radius: 8px;
              font-family: Arial, sans-serif;
              z-index: 1000;
              min-width: 250px;
            }
            .status-ok { color: #28a745; font-weight: bold; }
            .status-warning { color: #ffc107; font-weight: bold; }
            .status-danger { color: #dc3545; font-weight: bold; }
            .btn {
              padding: 8px 15px;
              margin: 5px 2px;
              border: none;
              border-radius: 5px;
              cursor: pointer;
              font-size: 14px;
            }
            .btn-eco { background: #28a745; color: white; }
            .btn-normal { background: #007bff; color: white; }
            .btn-attack { background: #dc3545; color: white; }
          </style>
        </head>
        <body>
          <div id="map"></div>
          
          <div class="info-panel">
            <h4>üìç Position</h4>
            <div><strong>Coords:</strong> <span id="coords">--, --</span></div>
            <div><strong>Secteur:</strong> <span id="secteur">--</span></div>
            <div><strong>Vitesse opt:</strong> <span id="vitesse-opt">-- km/h</span></div>
            <div><strong>Temps:</strong> <span id="temps">--</span></div>
            <div><strong>Retard:</strong> <span id="retard" class="status-ok">+0.0s</span></div>
          </div>

          <div class="strategy-panel">
            <h4>üèÅ Strat√©gie</h4>
            <div style="margin: 10px 0;">
              <button class="btn btn-eco" onclick="changerStrategie('economie')">üîã √âconomie</button>
              <button class="btn btn-normal" onclick="changerStrategie('normal')">üèÉ Normal</button>
              <button class="btn btn-attack" onclick="changerStrategie('attaque')">‚ö° Attaque</button>
            </div>
            <div id="strategy-info">
              <div>Mode: <strong id="mode-actuel">Normal</strong></div>
              <div>Tour optimal: <strong>81.6s</strong></div>
            </div>
          </div>

          <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
          <script>
            // Configuration du circuit
            const circuitConfig = {
              centre: [50.529211, 18.093939],
              zoom: 16,
              secteurs: [
                {id: 0, debut: [50.52927545, 18.09601748], vitesseOptimale: 68, tempsOptimal: 2.1},
                {id: 1, debut: [50.52919987, 18.09628445], vitesseOptimale: 57, tempsOptimal: 2.5},
                {id: 2, debut: [50.52917447, 18.09645162], vitesseOptimale: 43, tempsOptimal: 3.3}
                // Secteurs simplifi√©s pour la d√©mo
              ]
            };

            // Initialisation de la carte
            const map = L.map('map').setView(circuitConfig.centre, circuitConfig.zoom);
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
              maxZoom: 19,
            }).addTo(map);

            // Trac√© du circuit
            const traceCircuit = [
              [50.52927545, 18.09601748], [50.52919987, 18.09628445], 
              [50.52917447, 18.09645162], [50.52913776, 18.09657364],
              [50.52908994, 18.09666081], [50.52904102, 18.09670833],
              [50.52898118, 18.09673132], [50.52891061, 18.09671017],
              [50.5288493, 18.09666918], [50.52927545, 18.09601748]
            ];

            const circuitLine = L.polyline(traceCircuit, {
              color: '#0066cc',
              weight: 5,
              opacity: 0.8
            }).addTo(map);

            // Variables de simulation
            let marker = null;
            let tempsDepart = Date.now();
            let secteurActuel = 0;
            let strategieActuelle = 'normal';

            // Fonction de changement de strat√©gie
            function changerStrategie(nouveauMode) {
              strategieActuelle = nouveauMode;
              document.getElementById('mode-actuel').textContent = 
                nouveauMode.charAt(0).toUpperCase() + nouveauMode.slice(1);
              
              // Envoi √† Streamlit via postMessage
              parent.postMessage({
                type: 'strategy_change',
                strategy: nouveauMode,
                timestamp: Date.now()
              }, '*');
              
              console.log('üèÅ Strat√©gie chang√©e:', nouveauMode);
            }

            // Simulation de position (remplace par tes vraies donn√©es GPS)
            function simulerPosition() {
              const temps = (Date.now() - tempsDepart) / 1000;
              const progression = (temps * 0.01) % 1; // Progression circulaire
              const index = Math.floor(progression * (traceCircuit.length - 1));
              const [lat, lon] = traceCircuit[index];
              
              // Simulation du retard
              const retard = Math.sin(temps * 0.1) * 5; // Retard simul√©
              const retardStr = (retard >= 0 ? '+' : '') + retard.toFixed(1) + 's';
              
              // Mise √† jour de l'affichage
              document.getElementById('coords').textContent = `${lat.toFixed(6)}, ${lon.toFixed(6)}`;
              document.getElementById('secteur').textContent = `${secteurActuel + 1}/27`;
              document.getElementById('vitesse-opt').textContent = '65 km/h';
              document.getElementById('temps').textContent = `${temps.toFixed(1)}s`;
              
              const retardEl = document.getElementById('retard');
              retardEl.textContent = retardStr;
              retardEl.className = retard < 2 ? 'status-ok' : retard < 5 ? 'status-warning' : 'status-danger';
              
              // Mise √† jour du marqueur
              if (!marker) {
                marker = L.circleMarker([lat, lon], {
                  radius: 10,
                  fillColor: '#ff0000',
                  color: '#ffffff',
                  weight: 2,
                  fillOpacity: 0.9
                }).addTo(map);
              } else {
                marker.setLatLng([lat, lon]);
              }
              
              // Couleur selon le retard
              const couleur = retard < 2 ? '#00ff00' : retard < 5 ? '#ffa500' : '#ff0000';
              marker.setStyle({ fillColor: couleur });
            }

            // D√©marrage de la simulation
            setInterval(simulerPosition, 100);
            
            console.log('üèÅ Syst√®me de tracking Eta-One initialis√©!');
          </script>
        </body>
        </html>
        """
        
        components.html(tracking_html, height=550)
    
    with col2:
        st.subheader("‚öôÔ∏è Contr√¥les de Course")
        
        # M√©triques en temps r√©el
        col_m1, col_m2 = st.columns(2)
        with col_m1:
            st.metric("‚è±Ô∏è Temps", "0:00", "0.0s")
            st.metric("üèÉ Vitesse", "0 km/h", "0")
        with col_m2:
            st.metric("üìç Secteur", "1/27", "0")
            st.metric("üìä Retard", "+0.0s", "0.0s")
        
        st.markdown("---")
        
        # Contr√¥les de strat√©gie
        st.subheader("üéõÔ∏è Strat√©gies Disponibles")
        
        strategy_descriptions = {
            "√âconomie üîã": "R√©duit la vitesse de 15% pour √©conomiser l'√©nergie",
            "Normal üèÉ": "Strat√©gie optimale standard",
            "Attaque ‚ö°": "Augmente la vitesse de 20% pour rattraper le retard"
        }
        
        for strategy, description in strategy_descriptions.items():
            with st.expander(strategy):
                st.write(description)
        
        st.markdown("---")
        
        # Alertes automatiques
        st.subheader("üö® Alertes")
        if st.checkbox("Alertes automatiques activ√©es", value=True):
            st.info("‚úÖ Le syst√®me passera automatiquement en mode Attaque si le retard d√©passe 10 secondes")

# =============================================================================
# PAGE 2: SIMULATION
# =============================================================================

elif page == "‚öôÔ∏è Simulation":
    st.header("üîß Simulation du V√©hicule Hybride")
    
    # Param√®tres de simulation
    col1, col2 = st.columns([1, 2])
    
    with col1:
        st.subheader("üõ†Ô∏è Param√®tres de Simulation")
        
        # Bornes de vitesse
        st.markdown("**Bornes de vitesse (m/s)**")
        num_phases = st.slider("Nombre de phases d'acc√©l√©ration", 1, 8, 5)
        
        bornes_vitesse = []
        for i in range(num_phases):
            col_min, col_max = st.columns(2)
            with col_min:
                v_min = st.number_input(f"Phase {i+1} - Min", 
                                      min_value=0.0, max_value=15.0, 
                                      value=6.0 + i*0.5, step=0.1, 
                                      key=f"v_min_{i}")
            with col_max:
                v_max = st.number_input(f"Phase {i+1} - Max", 
                                      min_value=0.0, max_value=15.0, 
                                      value=8.0 + i*0.3, step=0.1, 
                                      key=f"v_max_{i}")
            bornes_vitesse.append((v_min, v_max))
        
        st.markdown("---")
        
        # Autres param√®tres
        temps_max = st.slider("Temps maximum (s)", 100, 300, 189)
        
        # Conditions environnementales
        st.markdown("**Conditions**")
        vent_active = st.checkbox("Vent activ√©", value=False)
        if vent_active:
            vitesse_vent = st.slider("Vitesse du vent (m/s)", 0.0, 15.0, 3.0)
            angle_vent = st.slider("Angle du vent (¬∞)", 0, 360, 270)
        else:
            vitesse_vent = 0
            angle_vent = 0
        
        aero_active = st.checkbox("A√©rodynamique", value=True)
        gravite_active = st.checkbox("Gravit√©", value=True)
        enviolo_on = st.checkbox("Transmission Enviolo", value=True)
        moteur_elec = st.checkbox("Moteur √©lectrique", value=True)
        
        # Coefficients
        st.markdown("**Coefficients**")
        coef_aero = st.slider("Coefficient a√©rodynamique", 0.5, 3.0, 1.63)
        coef_roul = st.slider("Coefficient de roulement", 0.5, 2.0, 1.0)
    
    with col2:
        st.subheader("üöÄ Lancement de la Simulation")
        
        if st.button("‚ñ∂Ô∏è Lancer la Simulation", key="run_sim"):
            st.session_state.simulation_running = True
            
            with st.spinner("üîÑ Simulation en cours..."):
                # Simulation avec barre de progression
                progress_bar = st.progress(0)
                status_text = st.empty()
                
                # Ici tu int√©grerais ta fonction simuler_vehicule_optimise()
                # Pour la d√©mo, on simule juste le processus
                for i in range(101):
                    progress_bar.progress(i)
                    status_text.text(f"Simulation: {i}%")
                    time.sleep(0.02)
                
                # R√©sultats simul√©s (remplace par tes vrais r√©sultats)
                results = {
                    'temps_total': 185.3,
                    'consommation_ml': 42.5,
                    'energie_elec_j': 2845,
                    'vitesse_moyenne': 28.7,
                    'efficiency_km_l': 387.2
                }
                
                st.session_state.simulation_results = results
                status_text.text("‚úÖ Simulation termin√©e!")
        
        # Affichage des r√©sultats
        if 'simulation_results' in st.session_state:
            st.markdown("---")
            st.subheader("üìä R√©sultats de Simulation")
            
            results = st.session_state.simulation_results
            
            # M√©triques principales
            col_r1, col_r2, col_r3 = st.columns(3)
            with col_r1:
                st.metric("‚è±Ô∏è Temps Total", f"{results['temps_total']:.1f}s", "¬±0.0s")
                st.metric("‚õΩ Consommation", f"{results['consommation_ml']:.1f}ml", "-2.3ml")
            with col_r2:
                st.metric("üîã √ânergie √âlec", f"{results['energie_elec_j']:.0f}J", "+150J")
                st.metric("üèÉ Vitesse Moy", f"{results['vitesse_moyenne']:.1f}km/h", "+1.2km/h")
            with col_r3:
                st.metric("üìà Efficacit√©", f"{results['efficiency_km_l']:.1f}km/l", "+12.5km/l")
            
            # Graphiques simul√©s
            st.markdown("---")
            st.subheader("üìà Graphiques de Performance")
            
            # G√©n√©ration de donn√©es simul√©es pour les graphiques
            time_sim = np.linspace(0, results['temps_total'], 1000)
            position_sim = np.cumsum(np.random.normal(1.5, 0.1, 1000))
            vitesse_sim = 20 + 10 * np.sin(time_sim * 0.1) + np.random.normal(0, 1, 1000)
            
            # Graphique vitesse
            fig_vitesse = go.Figure()
            fig_vitesse.add_trace(go.Scatter(
                x=time_sim, y=vitesse_sim,
                mode='lines', name='Vitesse',
                line=dict(color='blue', width=2)
            ))
            fig_vitesse.update_layout(
                title="Profil de Vitesse", 
                xaxis_title="Temps (s)", 
                yaxis_title="Vitesse (km/h)",
                height=400
            )
            st.plotly_chart(fig_vitesse, use_container_width=True)

# =============================================================================
# PAGE 3: OPTIMISATION
# =============================================================================

elif page == "üîß Optimisation":
    st.header("üéØ Optimisation des Strat√©gies")
    
    col1, col2 = st.columns([1, 1])
    
    with col1:
        st.subheader("üîç Param√®tres d'Optimisation")
        
        # Objectif d'optimisation
        objectif = st.selectbox(
            "Objectif principal",
            ["Minimiser la consommation", "Minimiser le temps", "Maximiser l'efficacit√©", "√âquilibre temps/conso"]
        )
        
        # Contraintes
        st.markdown("**Contraintes**")
        temps_max_opti = st.slider("Temps maximum accept√© (s)", 150, 250, 200)
        conso_max_opti = st.slider("Consommation maximum (ml)", 30, 80, 50)
        
        # Plages de variation des param√®tres
        st.markdown("**Plages d'optimisation**")
        
        with st.expander("Bornes de vitesse"):
            st.info("L'optimiseur va tester diff√©rentes combinaisons de bornes de vitesse")
            nb_iterations = st.slider("Nombre d'it√©rations", 10, 100, 50)
        
        with st.expander("Param√®tres v√©hicule"):
            optimize_aero = st.checkbox("Optimiser coefficient a√©rodynamique", value=True)
            optimize_roul = st.checkbox("Optimiser coefficient de roulement", value=False)
            optimize_timing = st.checkbox("Optimiser timing d'activation moteur", value=True)
        
        # Algorithme d'optimisation
        algo = st.selectbox(
            "Algorithme",
            ["Algorithme g√©n√©tique", "Optimisation par essaims", "Recherche par grille", "Bay√©sien"]
        )
    
    with col2:
        st.subheader("üöÄ Lancement de l'Optimisation")
        
        if st.button("üéØ Optimiser la Strat√©gie", key="optimize"):
            with st.spinner("üîÑ Optimisation en cours..."):
                progress_bar = st.progress(0)
                status_text = st.empty()
                
                # Simulation du processus d'optimisation
                best_results = []
                for iteration in range(nb_iterations):
                    # Simulation d'une it√©ration
                    progress_bar.progress((iteration + 1) / nb_iterations)
                    status_text.text(f"It√©ration {iteration + 1}/{nb_iterations}")
                    
                    # R√©sultats simul√©s pour chaque it√©ration
                    result = {
                        'iteration': iteration + 1,
                        'temps': 180 + np.random.normal(0, 10),
                        'consommation': 45 + np.random.normal(0, 5),
                        'efficacite': 350 + np.random.normal(0, 30),
                        'bornes': [(6+np.random.random(), 8+np.random.random()) for _ in range(5)]
                    }
                    best_results.append(result)
                    time.sleep(0.1)
                
                st.session_state.optimization_results = best_results
                status_text.text("‚úÖ Optimisation termin√©e!")
        
        # Affichage des r√©sultats d'optimisation
        if 'optimization_results' in st.session_state:
            st.markdown("---")
            st.subheader("üèÜ Meilleurs R√©sultats")
            
            results = st.session_state.optimization_results
            
            # Trouver le meilleur selon l'objectif
            if objectif == "Minimiser la consommation":
                best = min(results, key=lambda x: x['consommation'])
                metric_label = "Consommation"
                metric_value = f"{best['consommation']:.1f}ml"
            elif objectif == "Minimiser le temps":
                best = min(results, key=lambda x: x['temps'])
                metric_label = "Temps"
                metric_value = f"{best['temps']:.1f}s"
            else:
                best = max(results, key=lambda x: x['efficacite'])
                metric_label = "Efficacit√©"
                metric_value = f"{best['efficacite']:.1f}km/l"
            
            st.success(f"üéâ Meilleur r√©sultat: {metric_label} = {metric_value}")
            
            # Tableau des meilleurs r√©sultats
            df_results = pd.DataFrame([
                {
                    'It√©ration': r['iteration'],
                    'Temps (s)': f"{r['temps']:.1f}",
                    'Consommation (ml)': f"{r['consommation']:.1f}",
                    'Efficacit√© (km/l)': f"{r['efficacite']:.1f}"
                } for r in sorted(results, key=lambda x: x['efficacite'], reverse=True)[:10]
            ])
            
            st.dataframe(df_results, use_container_width=True)
            
            # Graphique de convergence
            fig_conv = go.Figure()
            
            temps_values = [r['temps'] for r in results]
            conso_values = [r['consommation'] for r in results]
            iterations = [r['iteration'] for r in results]
            
            fig_conv.add_trace(go.Scatter(
                x=iterations, y=temps_values,
                mode='lines+markers', name='Temps (s)',
                yaxis='y', line=dict(color='blue')
            ))
            
            fig_conv.add_trace(go.Scatter(
                x=iterations, y=conso_values,
                mode='lines+markers', name='Consommation (ml)',
                yaxis='y2', line=dict(color='red')
            ))
            
            fig_conv.update_layout(
                title="Convergence de l'Optimisation",
                xaxis_title="It√©ration",
                yaxis=dict(title="Temps (s)", side="left"),
                yaxis2=dict(title="Consommation (ml)", side="right", overlaying="y"),
                height=400
            )
            
            st.plotly_chart(fig_conv, use_container_width=True)

# =============================================================================
# PAGE 4: ANALYSES
# =============================================================================

elif page == "üìä Analyses":
    st.header("üìà Analyses et Comparaisons")
    
    # Comparaison de strat√©gies
    st.subheader("‚öñÔ∏è Comparaison de Strat√©gies")
    
    # Donn√©es simul√©es pour comparaison
    strategies = ['√âconomie', 'Normal', 'Attaque', 'Optimis√©']
    temps_data = [195.2, 185.3, 178.9, 182.1]
    conso_data = [38.5, 42.5, 48.2, 40.1]
    efficacite_data = [425.8, 387.2, 341.5, 410.3]
    
    df_comparison = pd.DataFrame({
        'Strat√©gie': strategies,
        'Temps (s)': temps_data,
        'Consommation (ml)': conso_data,
        'Efficacit√© (km/l)': efficacite_data
    })
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Graphique radar
        fig_radar = go.Figure()
        
        # Normalisation des donn√©es pour le radar
        temps_norm = [(200-t)/200*100 for t in temps_data]  # Plus c'est bas, mieux c'est
        conso_norm = [(60-c)/60*100 for c in conso_data]    # Plus c'est bas, mieux c'est
        efficacite_norm = [e/max(efficacite_data)*100 for e in efficacite_data]  # Plus c'est haut, mieux c'est
        
        for i, strategy in enumerate(strategies):
            fig_radar.add_trace(go.Scatterpolar(
                r=[temps_norm[i], conso_norm[i], efficacite_norm[i]],
                theta=['Rapidit√©', '√âconomie', 'Efficacit√©'],
                fill='toself',
                name=strategy
            ))
        
        fig_radar.update_layout(
            polar=dict(
                radialaxis=dict(
                    visible=True,
                    range=[0, 100]
                )),
            showlegend=True,
            title="Comparaison Multi-Crit√®res"
        )
        
        st.plotly_chart(fig_radar, use_container_width=True)
    
    with col2:
        # Tableau de comparaison
        st.dataframe(df_comparison, use_container_width=True)
        
        # Recommandation
        st.markdown("---")
        st.subheader("üéØ Recommandation")
        
        best_overall = df_comparison.loc[df_comparison['Efficacit√© (km/l)'].idxmax()]
        st.success(f"‚úÖ **Strat√©gie recommand√©e: {best_overall['Strat√©gie']}**")
        st.info(f"Temps: {best_overall['Temps (s)']}s | Consommation: {best_overall['Consommation (ml)']}ml | Efficacit√©: {best_overall['Efficacit√© (km/l)']}km/l")
    
    # Historique des courses
    st.markdown("---")
    st.subheader("üìú Historique des Courses")
    
    # Donn√©es d'historique simul√©es
    dates = pd.date_range('2025-01-01', periods=20, freq='W')
    historique_data = {
        'Date': dates,
        'Temps (s)': np.random.normal(185, 8, 20),
        'Consommation (ml)': np.random.normal(43, 4, 20),
        'Conditions': np.random.choice(['Sec', 'Humide', 'Venteux'], 20),
        'Strat√©gie': np.random.choice(['√âconomie', 'Normal', 'Attaque'], 20)
    }
    
    df_historique = pd.DataFrame(historique_data)
    df_historique['Efficacit√© (km/l)'] = 16500 / df_historique['Consommation (ml)']
    
    # Graphique d'√©volution temporelle
    fig_evolution = make_subplots(
        rows=2, cols=2,
        subplot_titles=('√âvolution du Temps', '√âvolution de la Consommation', 
                       '√âvolution de l\'Efficacit√©', 'Performance par Conditions'),
        specs=[[{"secondary_y": False}, {"secondary_y": False}],
               [{"secondary_y": False}, {"type": "box"}]]
    )
    
    # Temps
    fig_evolution.add_trace(
        go.Scatter(x=df_historique['Date'], y=df_historique['Temps (s)'],
                  mode='lines+markers', name='Temps', line=dict(color='blue')),
        row=1, col=1
    )
    
    # Consommation
    fig_evolution.add_trace(
        go.Scatter(x=df_historique['Date'], y=df_historique['Consommation (ml)'],
                  mode='lines+markers', name='Consommation', line=dict(color='red')),
        row=1, col=2
    )
    
    # Efficacit√©
    fig_evolution.add_trace(
        go.Scatter(x=df_historique['Date'], y=df_historique['Efficacit√© (km/l)'],
                  mode='lines+markers', name='Efficacit√©', line=dict(color='green')),
        row=2, col=1
    )
    
    # Box plot par conditions
    for condition in df_historique['Conditions'].unique():
        data_condition = df_historique[df_historique['Conditions'] == condition]
        fig_evolution.add_trace(
            go.Box(y=data_condition['Efficacit√© (km/l)'], name=condition),
            row=2, col=2
        )
    
    fig_evolution.update_layout(
        height=600,
        title_text="Historique des Performances",
        showlegend=False
    )
    
    st.plotly_chart(fig_evolution, use_container_width=True)
    
    # Tableau d√©taill√© de l'historique
    st.subheader("üìã D√©tail des Courses")
    
    # Filtrages
    col_f1, col_f2, col_f3 = st.columns(3)
    with col_f1:
        condition_filter = st.multiselect("Filtrer par conditions", 
                                         df_historique['Conditions'].unique(),
                                         default=df_historique['Conditions'].unique())
    with col_f2:
        strategy_filter = st.multiselect("Filtrer par strat√©gie",
                                        df_historique['Strat√©gie'].unique(),
                                        default=df_historique['Strat√©gie'].unique())
    with col_f3:
        date_range = st.date_input("P√©riode", 
                                  value=(df_historique['Date'].min().date(), 
                                        df_historique['Date'].max().date()),
                                  min_value=df_historique['Date'].min().date(),
                                  max_value=df_historique['Date'].max().date())
    
    # Application des filtres
    df_filtered = df_historique[
        (df_historique['Conditions'].isin(condition_filter)) &
        (df_historique['Strat√©gie'].isin(strategy_filter)) &
        (df_historique['Date'].dt.date >= date_range[0]) &
        (df_historique['Date'].dt.date <= date_range[1])
    ]
    
    # Formatage pour l'affichage
    df_display = df_filtered.copy()
    df_display['Date'] = df_display['Date'].dt.strftime('%Y-%m-%d')
    df_display['Temps (s)'] = df_display['Temps (s)'].round(1)
    df_display['Consommation (ml)'] = df_display['Consommation (ml)'].round(1)
    df_display['Efficacit√© (km/l)'] = df_display['Efficacit√© (km/l)'].round(1)
    
    st.dataframe(df_display, use_container_width=True)
    
    # Statistiques r√©sum√©es
    col_s1, col_s2, col_s3, col_s4 = st.columns(4)
    with col_s1:
        st.metric("üèÉ Temps Moyen", f"{df_filtered['Temps (s)'].mean():.1f}s",
                 f"{df_filtered['Temps (s)'].mean() - df_historique['Temps (s)'].mean():.1f}s")
    with col_s2:
        st.metric("‚õΩ Conso Moyenne", f"{df_filtered['Consommation (ml)'].mean():.1f}ml",
                 f"{df_filtered['Consommation (ml)'].mean() - df_historique['Consommation (ml)'].mean():.1f}ml")
    with col_s3:
        st.metric("üìà Efficacit√© Moy", f"{df_filtered['Efficacit√© (km/l)'].mean():.1f}km/l",
                 f"{df_filtered['Efficacit√© (km/l)'].mean() - df_historique['Efficacit√© (km/l)'].mean():.1f}km/l")
    with col_s4:
        st.metric("üìä Nb Courses", len(df_filtered), f"{len(df_filtered) - len(df_historique)}")

# =============================================================================
# FOOTER ET FONCTIONS UTILITAIRES
# =============================================================================

# Sidebar avec informations syst√®me
st.sidebar.markdown("---")
st.sidebar.subheader("‚ÑπÔ∏è Informations Syst√®me")

# Status de connexion (simul√©)
if st.sidebar.button("üîÑ Tester Connexion GPS"):
    with st.spinner("Test de connexion..."):
        time.sleep(1)
        st.sidebar.success("‚úÖ GPS connect√©")

# Status serveur
server_status = st.sidebar.checkbox("Serveur de tracking actif", value=True)
if server_status:
    st.sidebar.success("üü¢ Serveur en ligne")
else:
    st.sidebar.error("üî¥ Serveur hors ligne")

# Informations v√©hicule
st.sidebar.markdown("---")
st.sidebar.subheader("üöó V√©hicule Eta-One")
st.sidebar.info("""
**Configuration:**
- Moteur hybride thermique/√©lectrique
- Transmission Enviolo CVT
- Supercondensateurs 3000J
- Circuit: Sosnov√° (1321m)
""")

# Export des donn√©es
st.sidebar.markdown("---")
st.sidebar.subheader("üíæ Export")

if st.sidebar.button("üì• Exporter Donn√©es"):
    # Simulation d'export
    with st.spinner("Export en cours..."):
        time.sleep(1)
        st.sidebar.success("‚úÖ Donn√©es export√©es vers eta-one-data.csv")

if st.sidebar.button("üìä Rapport PDF"):
    with st.spinner("G√©n√©ration du rapport..."):
        time.sleep(2)
        st.sidebar.success("‚úÖ Rapport g√©n√©r√©: eta-one-report.pdf")

# Footer
st.markdown("---")
st.markdown("""
<div style='text-align: center; color: #666; padding: 20px;'>
    <p>üèÅ <strong>Eta-One Racing System</strong> - D√©velopp√© pour l'optimisation de performance v√©hicule hybride</p>
    <p>Version 1.0 | Circuit: Sosnov√°, R√©publique Tch√®que | Distance: 1321m</p>
</div>
""", unsafe_allow_html=True)

# =============================================================================
# FONCTIONS UTILITAIRES POUR INT√âGRATION AVEC TA SIMULATION
# =============================================================================

def load_simulation_module():
    """Charge ton module de simulation"""
    try:
        # Ici tu importerais ton fichier modele_simulation_silesia_hybridation.py
        # import modele_simulation_silesia_hybridation as sim
        # return sim
        return None
    except ImportError:
        st.error("Module de simulation non trouv√©. V√©rifiez que modele_simulation_silesia_hybridation.py est accessible.")
        return None

def run_real_simulation(bornes_vitesse, temps_max, **kwargs):
    """Lance ta vraie simulation"""
    sim_module = load_simulation_module()
    if sim_module:
        try:
            # Appel de ta fonction simuler_vehicule_optimise
            result = sim_module.simuler_vehicule_optimise(
                distance_totale=1321,  # Distance du circuit
                bornes_vitesse=bornes_vitesse,
                temps_max=temps_max,
                **kwargs
            )
            return result
        except Exception as e:
            st.error(f"Erreur lors de la simulation: {e}")
            return None
    return None

def get_live_gps_data():
    """R√©cup√®re les donn√©es GPS en temps r√©el depuis ton serveur"""
    try:
        # Connexion √† ton serveur Node.js
        response = requests.get("http://localhost:3000/api/course", timeout=1)
        if response.status_code == 200:
            return response.json()
    except:
        pass
    return None

def send_strategy_change(strategy):
    """Envoie un changement de strat√©gie au syst√®me"""
    try:
        data = {
            "mode": strategy,
            "timestamp": datetime.now().isoformat()
        }
        response = requests.post("http://localhost:3000/api/strategy", json=data, timeout=1)
        return response.status_code == 200
    except:
        return False

# Gestion des messages depuis l'interface Leaflet
if 'last_strategy_change' not in st.session_state:
    st.session_state.last_strategy_change = None

# Simulation d'√©coute des messages (dans une vraie app, tu utiliserais WebSocket)
# Cette partie serait remplac√©e par une vraie communication avec ton serveur